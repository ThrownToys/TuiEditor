#
# Some very basic syntax highlighting
#
# This currently processes the file multiple times for each type of hightlighting.
# It would likely be faster to iterate only once, which would be a future possible improvement.
#

colors = {
    red = "0xCC2222"
    teal = "0x00BBBB"
    grey = "0x777777"
    yellow = "0xBBBB00"
    pink = "0xFF55AA"
}

keywords = {
    "for"
    "while"
    "if"
    "in"
    "return"
    "else"
    "nil"
    "null"
}

colorMap = {
    comments = colors.grey
    keywords = colors.pink
    functions = colors.yellow
    strings = colors.red
    variables = colors.teal
}

script = currentScript()

for (keyword in keywords) {
    keywordColor = colorMap["keywords"]
    keywordSearch = string.format("%s ", keyword)
    replacement = string.format("^[%s](color: %s) ", keyword, keywordColor)
    temp = replaceString(script, keywordSearch, replacement)
    script = temp
}

for (keyword in keywords) {
    keywordColor = colorMap["keywords"]
    keywordSearch = string.format("%s\n", keyword)
    replacement = string.format("^[%s](color: %s)\n", keyword, keywordColor)
    temp = replaceString(script, keywordSearch, replacement)
    script = temp
}

trimLeadingWhitespace = function(line) {
    count = string.length(line)
    for (i = 0, i < count, i++) {
        currentChar = string.subString(line, i, 1)
        if currentChar != " " {
            return string.subString(line, i)
        }
    }
    return line
}

// TODO: highlight only commented parts of a line
commentHighlighting = function(line, originalLine) {
    commentColor = colorMap["comments"]
    count = string.length(line)
    
    trimmedLine = trimLeadingWhitespace(line)

    if (string.subString(trimmedLine, 0, 1) == "#") or (string.subString(line, 0, 2) == "//") {
        replacement = string.format("^[%s](color: %s)", originalLine, commentColor)
        return replacement
    } else {
        return line
    }
}

functionHighlighting = function(line) {
    newLine = line
    count = string.length(line)
    firstCharIndex = nil
    functionNameCount = 0
    functionColor = colorMap["functions"]
    
    for (i = 0, i < count, i++) {
        currentChar = string.subString(line, i, 1)
        
        charIndex = string.find("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.", currentChar)
        if (charIndex != nil) {
            if (firstCharIndex == nil) {
                firstCharIndex = i
            }
            functionNameCount += 1
        } else if (currentChar == "(") {
            if (firstCharIndex != nil) {
                functionName = string.subString(line, firstCharIndex, functionNameCount)
                replacement = string.format("^[%s](color: %s)", functionName, functionColor)
                temp = replaceString(newLine, functionName, replacement, firstCharIndex)
                .newLine = temp
                firstCharIndex = nil
                functionNameCount = 0
            } else {
                firstCharIndex = nil
                functionNameCount = 0
            }
        } else {
            firstCharIndex = nil
            functionNameCount = 0
        }
    }
    
    return newLine
}

stringHighlighting = function(line) {
    newLine = line
    count = string.length(line)
    stringColor = colorMap["strings"]
    
    for (i = 0, i < count, i++) {
        currentChar = string.subString(line, i, 1)
        if (currentChar == "\"") {
            stringLength = 0
            firstCharIndex = i
            i += 1
            currentChar = string.subString(line, i, 1)
            while ((i < count) and (currentChar != "\"")) {
                if currentChar == "\\" {
                    nextChar = string.subString(line, i + 1, 1)
                    if nextChar == "\"" or nextChar == "\\" {
                        i += 1
                        stringLength += 1
                    }
                }
                i += 1
                stringLength += 1
                .currentChar = string.subString(line, i, 1)
            }
            stringLength += 2
            
            foundString = string.subString(line, firstCharIndex, stringLength)
            replacement = string.format("^[%s](color: %s)", foundString, stringColor)
            temp = replaceString(newLine, foundString, replacement, firstCharIndex)
            .newLine = temp
            stringLength = 0
        }
    }
    
    return newLine
}

variableHighlighting = function(line) {
    newLine = line
    count = string.length(line)
    stringColor = colorMap["variables"]
    varStartIndex = nil
    stringLength = 0
    prevChar = nil
    braceCount = 0
    newLinei = 0
    newLineVarStartIndex = nil
        
    for (i = 0, i < count, i++) {
        currentChar = string.subString(line, i, 1)
        charIndex = string.find("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", currentChar)
        # print("charIndex: ", charIndex, " currentChar: ", currentChar, " varStartIndex: ", varStartIndex)
        if currentChar == "^" {
            braceCount += 1
            varStartIndex = nil
            while ((braceCount > 0) and (i < count)) {
                i += 1
                newLinei +=1
                currentChar = string.subString(line, i, 1)
                if currentChar == ")" {
                    braceCount -= 1
                } else if currentChar == "^" {
                    braceCount += 1
                }
            }
        } else if (currentChar == "\"") {
            i += 1
            newLinei +=1
            currentChar = string.subString(line, i, 1)
            while ((i < count) and (currentChar != "\"")) {
                i += 1
                newLinei +=1
                currentChar = string.subString(line, i, 1)
            }
        }
        if charIndex != nil {
            .stringLength += 1
            if varStartIndex == nil {
                varStartIndex = i
                newLineVarStartIndex = newLinei
            }
        } else {
            if (varStartIndex != nil) {
                foundString = string.subString(line, varStartIndex, stringLength)
                replacement = string.format("^[%s](color: %s)", foundString, stringColor)
                temp = replaceString(newLine, foundString, replacement, newLineVarStartIndex)
                .newLine = temp
                .stringLength = 0
                .varStartIndex = nil
                newLinei += string.length(replacement)
                newLinei -= string.length(foundString)
            }
        }
        prevChar = currentChar
        charIndex = nil
        newLinei += 1
    }
    
    if (varStartIndex != nil) {
        foundString = string.subString(line, varStartIndex, stringLength)
        replacement = string.format("^[%s](color: %s)", foundString, stringColor)
        temp = replaceString(newLine, foundString, replacement, varStartIndex)
        .newLine = temp
    }
    
    return newLine
}

syntaxHighlightScript = function(script) {
    newLines = ""
    lines = splitString(script, "\n")
    count = table.count(lines)
    i = 0
    for (i = 0, i < count, i++) {
        currentLine = lines[i]
        modifiedLine = functionHighlighting(currentLine)
        modifiedLine = stringHighlighting(modifiedLine)
        modifiedLine = variableHighlighting(modifiedLine)
        modifiedLine = commentHighlighting(modifiedLine, currentLine)
        .newLines = string.format("%s%s\n", newLines, modifiedLine)
    }
    return newLines
}

result = syntaxHighlightScript(script)

returnValue = result
